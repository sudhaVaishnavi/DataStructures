#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <time.h>

#define MAX_SIZE 10000

struct Hash_Data {
    int data[MAX_SIZE];
    int index[MAX_SIZE];
    int size;
};
void init(struct Hash_Data *hdata){ int i;
    hdata->size = 0;
    for(i=0;i< MAX_SIZE;i++){
    	hdata->index[i] = -1; 
    }
}
void insert(struct Hash_Data *hdata, int x){
    if(hdata->size >= MAX_SIZE){
        printf("data structure is full.\n");
        return;
    }
    if (hdata->index[x] == -1) {
        hdata->data[hdata->size] = x;
        hdata->index[x] = hdata->size;
        hdata->size++;
    }
    display(hdata);
}
void Remove(struct Hash_Data *hdata, int x){
    if (hdata->index[x] == -1) {
        printf("element not found.\n");
        return;
    }
    int i;
    int index = hdata->index[x];
    hdata->index[x] = -1;
    for(i=index;i<hdata->size - 1;i++){
        hdata->data[i] = hdata->data[i + 1];
        hdata->index[hdata->data[i]] = i;
    }
    hdata->size--;
    display(hdata);
}
bool search(struct Hash_Data *hdata, int x) {
    bool result = (hdata->index[x] != -1);
    printf("Search for %d: %s\n", x, result ? "Found" : "Not Found");
    return result;
}
int getRandom(struct Hash_Data *hdata) {
    if(hdata->size == 0){
        printf("data structure is empty.\n");
        return -1;
    }
    int rIndex = rand() % hdata->size;
    int rElement = hdata->data[rIndex];
    printf("Random element: %d\n", rElement);
    return rElement;
}
void display(struct Hash_Data *hdata) {
    printf("output elements: "); int i;
    for(i=0;i<hdata->size;i++){
        printf("%d ", hdata->data[i]);
    }
    printf("\n");
}
int main() {
    srand(time(NULL));
    struct Hash_Data hdata;
    init(&hdata);
    int ch, x;
    while (1) {
        printf("Choose an operation:\n");
        printf("1. Insert\n");
        printf("2. Remove\n");
        printf("3. Search\n");
        printf("4. Get Random\n");
        printf("5. Exit\n");
        printf("enter choice: ");
        scanf("%d", &ch);
        getchar(); 
        switch (ch) {
            case 1:
                printf("element to insert: "); scanf("%d",&x);
                getchar();
                insert(&hdata, x);
                break;
            case 2:
                printf("element to remove: "); scanf("%d",&x);
                getchar(); 
                Remove(&hdata, x);
                break;
            case 3:
                printf("element to search: "); scanf("%d",&x);
                getchar(); 
                search(&hdata, x);
                break;
            case 4:
                getRandom(&hdata);
                break;
            case 5:
                exit(0);
            default:
                printf("Invalid choice\n");
        }
    }
    return 0;
}
